THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

L4Ka::Pistachio is now an L4 exokernel developed by the System
Architecture Group at the University of Karlsruhe in collaboration
with the DiSy group at the University of New South Wales,
Australia.  The exokernel exposes only the minimal mechanisms
required to implement operating system services while delegating
resource management policies to user-level servers.  It continues to
implement the L4 Version 4 kernel API (currently code-named Version
X.2), supports both 32- and 64-bit targets, provides multiprocessor
operation and super-fast IPC.


Building with modern compilers
==============================

The build system now expects compilers that understand modern
language standards: C sources require C23 while C++ sources require at
least C++23. GCC 14 and Clang 17 are known to work. Autoconf 2.69 or
later is required to regenerate the configure script.

Example build steps on a typical Linux host::

    $ cd user
    $ autoreconf -i        # requires autoconf and autoheader
    $ ./configure --host=i686-pc-linux-gnu   # or x86_64-pc-linux-gnu
    $ make

When building the kernel choose either `SUBARCH=x32` for i686 or
`SUBARCH=x64` for x86_64 in `kernel/Makeconf.local` before invoking
`make` inside the build directory.


Requirements
------------
Pistachio requires a C compiler with C23 support and a C++ compiler
that implements at least the C++23 standard. The minimum versions
known to work are GCC 14 and Clang 17.

Building on i686 and x86_64 hosts
--------------------------------
If you obtained this tree from version control, run the following in
`user/` before configuring:

    autoheader
    autoconf

After modifying the build system remember to regenerate and apply the
configuration:

    autoconf && ./configure

Create a build directory and configure the system:

    mkdir build && cd build
    ../configure --host=i686 \
                 --with-comport=0 \
                 --with-comspeed=115200 \
                 --with-kerneldir=/path/to/kernel

For 64-bit machines use `--host=amd64`.  Additional link-base options
(e.g. `--with-kickstart-linkbase`, `--with-s0-linkbase`,
`--with-roottask-linkbase`) may be supplied as required.
After configuration run `make` and optionally `make install`.


Launching user-level resource managers
-------------------------------------
Once the exokernel and user land are built you can start resource
managers using the `kickstart` utility.  For example, to build and
launch the `sigma0` memory manager run::

    $ make -C user/serv/sigma0
    $ user/util/kickstart/kickstart -roottask=user/serv/sigma0/sigma0

`kickstart` loads the kernel and the specified user tasks and then
transfers control to the resource manager.  Additional managers can be
specified on the command line in the order they should be started.

To boot with the example memory and scheduler servers first build
them::

    $ make -C user/serv/memory
    $ make -C user/serv/scheduler

Then launch them together with the kernel using `kickstart`::

    $ user/util/kickstart/kickstart \
          -roottask=user/serv/memory/memory \
          user/serv/scheduler/scheduler


Migration from the microkernel API
----------------------------------
Existing applications built for the previous microkernel continue to
operate, but the kernel no longer provides built-in pagers or a
scheduler.  Applications must obtain these services from external
resource managers via IPC.  Replace direct invocations of the old
paging and scheduling interfaces with RPC stubs to the appropriate
manager to ensure compatibility with the exokernel.


Development workflow
--------------------
The repository uses [pre-commit](https://pre-commit.com) to run
formatters and linters such as **black**, **ruff**, **shellcheck** and
**golangci-lint**.  Install the hooks once after cloning::

    $ pre-commit install

With the hooks installed, each commit will automatically format and
lint changed files.

