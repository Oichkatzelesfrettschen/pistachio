THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

See the LICENSE file for the complete terms.

L4Ka::Pistachio is now an L4 exokernel developed by the System
Architecture Group at the University of Karlsruhe in collaboration
with the DiSy group at the University of New South Wales,
Australia.  The exokernel exposes only the minimal mechanisms
required to implement operating system services while delegating
resource management policies to user-level servers.  It continues to
implement the L4 Version 4 kernel API (currently code-named Version
X.2), supports both 32- and 64-bit targets, provides multiprocessor
operation and super-fast IPC.


Building with modern compilers
==============================

The build system expects C23 and C++23 capable compilers. The
LLVM toolchain with Clang 17 or newer is required. Autoconf 2.69 or
later is needed only when regenerating the legacy `configure` script.
Detailed instructions, including cross‑compilation tips, are available in the
[`docs/building.md`](docs/building.md#cross-compilation) guide.

Only C++23 and platform‑agnostic assembly sources are permitted in the tree.
Other languages must be transpiled or otherwise converted before inclusion.


Requirements
------------
Pistachio requires the LLVM toolchain with Clang and LLD providing
C23 and C++23 support.  Clang 17 or newer is mandatory.

Building on i686 and x86_64 hosts
--------------------------------
Typical build steps are outlined in `docs/building.md`.  After
configuring a build directory you can run `make` and optionally
`make install`.


Launching user-level resource managers
-------------------------------------
Once the exokernel and user land are built you can start resource
managers using the `kickstart` utility.  For example, to build and
launch the `sigma0` memory manager run::

    $ make -C user/serv/sigma0
    $ user/util/kickstart/kickstart -roottask=user/serv/sigma0/sigma0

`kickstart` loads the kernel and the specified user tasks and then
transfers control to the resource manager.  Additional managers can be
specified on the command line in the order they should be started.

To boot with the example memory and scheduler servers first build
them::

    $ make -C user/serv/memory
    $ make -C user/serv/scheduler

Then launch them together with the kernel using `kickstart`::

    $ user/util/kickstart/kickstart \
          -roottask=user/serv/memory/memory \
          user/serv/scheduler/scheduler

Additional servers can be started in the same manner.  For example,
to also launch a device service pass its binary as another argument::

    $ user/util/kickstart/kickstart \
          -roottask=user/serv/memory/memory \
          user/serv/scheduler/scheduler \
          user/serv/device/device


Migration from the microkernel API
----------------------------------
Existing applications built for the previous microkernel continue to
operate, but the kernel no longer provides built-in pagers or a
scheduler.  Applications must obtain these services from external
resource managers via IPC.  Replace direct invocations of the old
paging and scheduling interfaces with RPC stubs to the appropriate
manager to ensure compatibility with the exokernel.


Development workflow
--------------------
The repository uses [pre-commit](https://pre-commit.com) to run
formatters and linters such as **black**, **ruff**, **shellcheck** and
**golangci-lint**.  The `setup.sh` script installs `pre-commit` via
`pip` and fetches the hook environments automatically.  Ensure the
script runs while network access is available so required packages can
be downloaded.  After cloning the repository you can re-install the
You can also run the script offline by placing the required `.deb` files in `offline_packages/` and invoking `./setup.sh --offline`.
hooks manually if desired::

    $ pre-commit install --install-hooks

With the hooks installed, each commit will automatically format and
lint changed files.  Run `pre-commit` manually to check all files or
`pre-commit autoupdate` to refresh hook versions.
An additional hook rejects any staged files that are not C++23 or
assembly sources, ensuring the repository remains language limited.

Running clang-tidy
------------------
The tree includes a `.clang-tidy` configuration enabling the modernize
and readability checks. The pre-commit hook runs the tool on modified
C/C++ sources.  A `compile_commands.json` database is generated under
`user/` to provide build flags.  Invoke the tool manually with the
database path::

    $ clang-tidy -p user path/to/file.cc


Model checking
--------------
A collection of TLA+ specifications lives in the `tla/` directory. The
`TicketLock.tla` model can be explored locally with TLC once Java and
the TLA+ tools are installed::

    $ java -cp /path/to/tla/lib/* tlc2.TLC -deadlock tla/TicketLock.tla
