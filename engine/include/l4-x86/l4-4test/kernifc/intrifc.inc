;-----------------------------------------------------------------------
;
;        int identifier
;
;-----------------------------------------------------------------------
  
divide_error      equ    0h
debug_exception   equ    1h
nmi               equ    2h
breakpoint        equ    3h
overflow          equ    4h
bound_check       equ    5h
invalid_opcode    equ    6h
co_not_available  equ    7h
double_fault      equ    8h
co_seg_overrun    equ    9h
pl3_fault         equ    9h
invalid_tss       equ   0Ah
seg_not_present   equ   0Bh
stack_exception   equ   0Ch
general_protection equ  0Dh
page_fault        equ   0Eh
apic_error        equ   0Fh
co_error          equ   10h
alignment_check   equ   11h
machine_check     equ   12h


;----------------------------------------------------------------------------
;
;       intr stack descriptions
;
;----------------------------------------------------------------------------


iret_vec struc

  iret_eip          dd 0
  iret_cs           dw 0
  iret_code         db 0
                    db 0
  iret_eflags       dd 0
  iret_esp          dd 0
  iret_ss           dw 0
                    db 0
  iret_aux_state    db 0
                    
iret_vec ends


 
  IF kernel_type EQ i486 ;-----------------------------------------------


int_pm_stack struc

  ip_edi        dd 0
  ip_esi        dd 0
  ip_ebp        dd 0
                dd 0
  ip_ebx        dd 0
  ip_edx        dd 0
  ip_ecx        dd 0
  ip_eax        dd 0

  ip_error_code dd 0

  ip_eip        dd 0
  ip_cs         dw 0
  ip_code       db 0
                db 0
  ip_eflags     dd 0
  ip_esp        dd 0
  ip_ss         dw 0,0

int_pm_stack ends



  ELSE   ;-------------------------------------------------------------------


int_pm_stack struc

  ip_ds         dd 0

  ip_edi        dd 0
  ip_esi        dd 0
  ip_ebp        dd 0
                dd 0
  ip_ebx        dd 0
  ip_edx        dd 0
  ip_ecx        dd 0
  ip_eax        dd 0

  ip_error_code dd 0

  ip_eip        dd 0
  ip_cs         dw 0
  ip_code       db 0
                db 0
  ip_eflags     dd 0
  ip_esp        dd 0
  ip_ss         dw 0
                db 0
  ip_aux_state  db 0

int_pm_stack ends


  ENDIF  ;-------------------------------------------------------------------




;----------------------------------------------------------------------------
;
;       exception & intr codes
;
;----------------------------------------------------------------------------
;
;       FEeeeeee         error code (eeeeee) generated by hardware
;
;       FFFFFFkk         code (kk) generated by kernel
;
;----------------------------------------------------------------------------


hardware_ec              equ 0FEh


fault                    equ (-128+0)
trap1                    equ (-128+1)
trap2                    equ (-128+2)
debug_ec                 equ (-128+3)
error_ec                 equ (-128+4)
co_error_ec              equ (-128+5)
trap6                    equ (-128+6)
trap8                    equ (-128+8)

switch_code              equ (-128+9)

ipc_code                 equ (-128+127)


min_icode                equ (hardware_ec SHL 24)
max_icode                equ switch_code


;----------------------------------------------------------------------------
;
;       ipre
;
;----------------------------------------------------------------------------
; PRECONDITION:
;
;       stack contains iret vector generated by hardware
;       interrupts disabled
;
;       icode = ec_present  <=>  stack contains hw generated error code
;
;----------------------------------------------------------------------------
; POSTCONDITION:
;
;       regs saved, stack image allows restart after shutdown
;
;       EAX,EDX,ESI,EDI,EBP   unchanged
;
;----------------------------------------------------------------------------


ipre macro icode,dscode

  IFIDN <icode>,<ec_present>
     mov   byte ptr ss:[esp+3],hardware_ec
  ELSE
  IFDIF <icode>,<ec_pushed>
     push  icode
  ENDIF
  ENDIF
  pushad
  IF kernel_type NE i486
     push  ds
     IFDIF <dscode>,<no_ds_load>
        push  linear_kernel_space
        pop   ds
     ENDIF
  ENDIF

  endm



;----------------------------------------------------------------------------
;
;       ipost
;
;----------------------------------------------------------------------------
; PRECONDITION:
;
;       ipre generated stack
;
;       DS,ES   linear space
;
;       interrupts disabled !
;
;----------------------------------------------------------------------------
; POSTCONDITION:
;
;       saved context restored, returned from interrupt/exception
;
;----------------------------------------------------------------------------



ipost macro

  lea   eax,[esp+sizeof int_pm_stack]
  mov   ss:[cpu_esp0],eax
  IF kernel_type NE i486
     pop   ds
  ENDIF
  popad
  add   esp,4
  iretd

  endm





;----------------------------------------------------------------------------
;
;       tpre
;
;----------------------------------------------------------------------------
; PRECONDITION:
;
;       stack contains iret vector generated by hardware
;       interrupts disabled
;
;----------------------------------------------------------------------------
; POSTCONDITION:
;
;       no regs saved, DS saved and set to linear_kernel_space at pentium
;
;       regs       unchanged
;
;----------------------------------------------------------------------------


tpre macro icode,sg1,sg2

  push  icode
  IF kernel_type NE i486
     IFNB  <sg1>
           push  linear_kernel_space
           pop   sg1
     ENDIF
     IFNB  <sg2>
           push  linear_kernel_space
           pop   sg2
     ENDIF
  ENDIF

  endm



;----------------------------------------------------------------------------
;
;       tpost
;
;----------------------------------------------------------------------------
; PRECONDITION:
;
;       tpre generated stack
;
;       interrupts disabled !
;
;----------------------------------------------------------------------------
; POSTCONDITION:
;
;       at Pentium saved DS restored, returned from interrupt/exception
;
;----------------------------------------------------------------------------

  IF    kernel_type EQ i486
  
  

tpost macro reg,sg1,sg2

  IFNB  <reg>
        lea   reg,[esp+sizeof iret_vec+4]
        mov   ds:[cpu_esp0],reg
        pop   reg
  ELSE      
        mov   ss:[esp],eax
        lea   eax,[esp+sizeof iret_vec+4]
        mov   ds:[cpu_esp0],reg
        pop   eax
  ENDIF      
  iretd

  endm


  ENDIF




  IF    kernel_type NE i486
  
  

tpost macro reg,sg1,sg2

  IFNB  <reg>
        lea   reg,[esp+sizeof iret_vec+4]
        IFNB  <sg1>
              mov   ds:[cpu_esp0],reg
        ELSE
              mov   ss:[cpu_esp0],reg
        ENDIF            
        pop   reg
  ELSE      
        mov   ss:[esp],eax
        lea   eax,[esp+sizeof iret_vec+4]
        IFNB  <sg1>
              mov   ds:[cpu_esp0],eax
        ELSE
              mov   ss:[cpu_esp0],eax
        ENDIF            
        pop   eax
  ENDIF      
  IFNB  <sg1>
        push  linear_space
        pop   sg1
  ENDIF
  IFNB  <sg2>
        push  linear_space
        pop   sg2
  ENDIF
  iretd

  endm


  ENDIF




;----------------------------------------------------------------------------
;
;       lea int_xx_stack bottom
;
;----------------------------------------------------------------------------
; PRECONDITION:
;
;       DS      linear space
;
;----------------------------------------------------------------------------
; POSTCONDITION:
;
;       reg     addr of int_xx_stack to pl3
;
;----------------------------------------------------------------------------
 

lea___ip_bottom macro reg,tcb 

  test  [tcb+coarse_state],v86
  lea   reg,[tcb+sizeof pl0_stack-sizeof int_pm_stack]
  CORNZ
  IFZ   <dword ptr [reg+ip_ss]>,0
        sub   reg,sizeof int_v86_stack - sizeof int_pm_stack
  FI
  endm