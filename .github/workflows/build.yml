name: build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  cmake-clang:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install LLVM toolchain
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang lld llvm cmake ninja-build
      - name: Install Python tools
        run: |
          python3 -m pip install --user pre-commit shellcheck-py compiledb configuredb
          pre-commit --version
          shellcheck --version
          compiledb --version
          configuredb --help
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_LINKER=lld \
            -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build -j$(nproc)
      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color always --all-files
      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure
  build-userland:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: x86_64-linux-gnu
            cflags: "-march=x86-64"
          - host: i686-linux-gnu
            cflags: "-m32 -march=i686"
    steps:
      - uses: actions/checkout@v4
      - name: Install build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential gcc-multilib g++-multilib
      - name: Install Python tools
        run: |
          python3 -m pip install --user pre-commit shellcheck-py compiledb configuredb
          pre-commit --version
          shellcheck --version
          compiledb --version
          configuredb --help
      - name: Configure userland
        run: |
          mkdir build
          cd build
          CFLAGS="${{ matrix.cflags }}" CXXFLAGS="${{ matrix.cflags }}" \
          ../user/configure --host=${{ matrix.host }}
      - name: Build userland
        run: |
          cd build
          make -j$(nproc) CPU_CFLAGS="${{ matrix.cflags }}"
      - name: Run tests
        run: |
          pip install pytest
          pytest tests/test_subdomain.py tests/test_waitqueue.py

  build-kernel:
    runs-on: ubuntu-latest
    needs: build-userland
    steps:
      - uses: actions/checkout@v4
      - name: Install build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential
      - name: Install Python tools
        run: |
          python3 -m pip install --user pre-commit shellcheck-py compiledb configuredb
          pre-commit --version
          shellcheck --version
          compiledb --version
          configuredb --help
      - name: Build kernel
        run: |
          make -C kernel BUILDDIR=$PWD/kernel-build
          cd kernel-build
          make -j$(nproc)
      - name: Archive kernel image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel-build/*-kernel

  build-kernel-x16:
    runs-on: ubuntu-latest
    needs: build-userland
    steps:
      - uses: actions/checkout@v4
      - name: Install build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential m16c-elf-gcc
      - name: Build kernel (i16)
        run: |
          make -C kernel BUILDDIR=$PWD/kernel-i16 TOOLPREFIX=m16c-elf- ARCH=i16 SUBARCH=x16
          cd kernel-i16
          make -j$(nproc)
